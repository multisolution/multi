scalar DateTime

enum Role {
    ADMINISTRATOR
    COLLABORATOR
}

enum MeetingStatus {
    SCHEDULED
    CANCELLED
}

type User {
    id: ID!
    email: String!
    role: Role!
}

type MeetingRoom {
    id: ID!
    roomNumber: Int!
    calendar: [Meeting]!
    description: String
    color: String
}

type Meeting {
    id: ID!
    title: String!
    room: MeetingRoom!
    host: User!
    startsAt: DateTime!
    endsAt: DateTime!
    status: MeetingStatus!
}

type CalendarTime {
    hour: String!
    meetings: [Meeting]!
}

type Calendar {
    date: String!
    times: [[CalendarTime]]!
}

type Invite {
    from: User!
}

type Service {
    id: ID!
    title: String!
}

type ServiceOrder {
    id: ID!
    meeting: Meeting!
    fulfilled: Boolean!
    requests: [ServiceRequest]!
}

type ServiceRequest {
    id: ID!
    order: ServiceOrder!
    service: Service!
    total: Int!
}

type Subscription {
    serviceOrdered: ServiceOrder!
}

type Query {
    me: User
    meetingRooms: [MeetingRoom]!
    services: [Service]!
    myMeetings: [Meeting]!
    allUsers: [User]!
    calendar(from: DateTime, to: DateTime): [Calendar]!
    invite(code: String!): Invite
}

type Mutation {
    signIn(email: String!, password: String!): String!
    signOut: Boolean!
    createUser(input: UserInput!): User
    createMeeting(input: MeetingInput!): Meeting
    createMeetingRoom(input: MeetingRoomInput!): MeetingRoom
    cancelMeeting(meetingId: ID!): Boolean
    editMeeting(input: MeetingInput!): Meeting
    deleteUser(userId: ID!): Boolean
    updateUser(userInput: UserInput!): Boolean
    createInvite: String!
    placeOrder(input: ServiceOrderInput): ServiceOrder!
}

input UserInput {
    email: String!
    password: String!
    role: Role
    id: String
    inviteCode: String
}

input MeetingInput {
    id: ID
    title: String!
    roomId: ID!
    startsAt: DateTime!
    endsAt: DateTime!
}

input MeetingRoomInput {
    roomNumber: Int!
    description: String
}

input ServiceOrderInput {
    meetingId: ID!
    requests: [ServiceRequestInput]
}

input ServiceRequestInput {
    serviceId: ID!
    total: Int!
}
